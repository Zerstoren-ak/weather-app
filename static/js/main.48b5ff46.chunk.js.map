{"version":3,"sources":["components/WeatherGlobal/WeatherWrapper/videos sync nonrecursive //.mp4","components/WeatherGlobal/WeatherWrapper/videos/Clouds-day.mp4","components/WeatherGlobal/WeatherWrapper/videos/Drizzle-day.mp4","components/WeatherGlobal/WeatherWrapper/videos/Fog-day.mp4","components/WeatherGlobal/WeatherWrapper/videos/Rain-day-add.mp4","components/WeatherGlobal/WeatherWrapper/videos/Rain-day.mp4","components/WeatherGlobal/WeatherWrapper/videos/Snowfall.mp4","components/WeatherGlobal/WeatherWrapper/videos/Sun.mp4","components/WeatherGlobal/WeatherWrapper/videos/Thunderstorm-day.mp4","components/WeatherGlobal/FormCitySearchContainer/FormCitySearch/FormCitySearch.js","components/WeatherGlobal/FormCitySearchContainer/FormCitySearchContainer.js","utils/utils.js","components/WeatherGlobal/WeatherWrapper/WeatherShort/Clock/Clock.js","components/WeatherGlobal/WeatherWrapper/WeatherShort/WeatherShort.js","components/WeatherGlobal/WeatherWrapper/WeatherDetailed/WeatherDetailedLocation/WeatherDetailedLocation.js","components/WeatherGlobal/WeatherWrapper/WeatherDetailed/WeatherDetailedData/WeatherDetailedData.js","components/WeatherGlobal/WeatherWrapper/WeatherDetailed/WeatherDetailed.js","components/WeatherGlobal/WeatherWrapper/WeatherWrapper.js","components/WeatherGlobal/WeatherGlobal.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","FormCitySearch","handleForm","className","onSubmit","TextField","required","type","name","label","variant","Button","onsubmit","size","color","FormCitySearchContainer","addCity","apiKey","toastSettings","useState","cityData","setCityData","event","a","preventDefault","city","target","value","country","fetch","get_api","json","data","cod","message","sys","console","log","toast","error","useEffect","entries","length","degreePrettier","temperature","Math","round","timeFormatter","time","Intl","DateTimeFormat","hour","minute","format","Clock","props","localTime","setLocalTime","timer","weatherData","timezone","newDate","Date","utc_timestamp","getTime","getTimezoneOffset","setInterval","t","clearInterval","WeatherShort","IconButton","aria-label","onClick","removeCity","fontSize","clickHandlerExpand","WeatherDetailedLocation","description","WeatherDetailedData","toLocalTime","sunrise","sunset","feelsLike","clouds","temperatureMin","temperatureMax","pressure","humidity","windSpeed","WeatherDetailed","clickHandlerMinify","VIDEOS","_require","videos","element","replace","importAll","require","WeatherWrapper","toggleWeatherFlag","setToggleWeatherFlag","videoSource","setVideoSource","toggleWeatherToShow","weatherDescriptionAPI","draggableId","_props","toString","convertToString","index","provided","ref","innerRef","draggableProps","dragHandleProps","autoPlay","loop","muted","playsInline","src","clickHandlerRemove","localStorage","citiesList","JSON","stringify","API_KEY","ToastSettings","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","WeatherGlobal","parse","setCitiesList","weatherList","setWeatherList","getWeatherByIDs","useCallback","idList","join","ok","list","main","temp","weather","feels_like","all","temp_min","temp_max","wind","speed","find","onDragEnd","result","destination","source","droppableId","newOrder","draggedItem","filter","splice","droppableProps","TransitionGroup","CSSTransition","key","timeout","classNames","_","newList","weatherShortRemove","placeholder","App","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","Fragment","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2RAAA,IAAIA,EAAM,CACT,mBAAoB,GACpB,oBAAqB,GACrB,gBAAiB,GACjB,qBAAsB,GACtB,iBAAkB,GAClB,iBAAkB,GAClB,YAAa,GACb,yBAA0B,IAI3B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,mBC7BpBU,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,8C,wOCsC5BC,MAjCf,YAAuC,IAAdC,EAAa,EAAbA,WACrB,OACI,0BAAMC,UAAW,cAAeC,SAAUF,GACtC,6BACI,kBAACG,EAAA,EAAD,CACAF,UAAW,aACXG,UAAQ,EAACC,KAAM,OACfC,KAAM,OACNnB,GAAG,iBACHoB,MAAM,UACNC,QAAQ,aAER,kBAACL,EAAA,EAAD,CACIF,UAAW,aACXI,KAAM,OAAQC,KAAM,UACpBnB,GAAG,iBACHoB,MAAM,kBACNC,QAAQ,cAGhB,kBAACC,EAAA,EAAD,CACIR,UAAW,cACXI,KAAMK,SACNF,QAAQ,WACRG,KAAK,SACLC,MAAM,WALV,iBCqBGC,MA1Cf,YAAoE,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,cAAgB,EAChCC,mBAAU,IADsB,mBACzDC,EADyD,KAC/CC,EAD+C,iDAY/D,WAA6BC,GAA7B,qBAAAC,EAAA,6DACID,EAAME,iBADV,SAGcC,EAAOH,EAAMI,OAAOD,KAAKE,MACzBC,EAAUN,EAAMI,OAAOE,QAAQD,MACrCL,EAAMI,OAAOD,KAAKE,MAAlB,GACAL,EAAMI,OAAOE,QAAQD,MAArB,GANR,SAO8BE,MAAM,qDAAD,OAAsDJ,EAAtD,YAA8DG,GAAoB,GAAlF,kBAA8FX,EAA9F,kBAPnC,cAOca,EAPd,iBAQ2BA,EAAQC,OARnC,cAQcC,EARd,QAUiBC,KAAO,KAAOD,EAAKC,KAAO,KAV3C,uBAWkBD,EAAKE,QAXvB,QAaQb,EAAY,CACRhC,GAAI2C,EAAK3C,GACToC,KAAMO,EAAKxB,KACXoB,QAASI,EAAKG,IAAIP,UAhB9B,kDAoBQQ,QAAQC,IAAR,MACAC,IAAMC,MAAN,KAAmBrB,GArB3B,2DAZ+D,sBAqC/D,OAjCAsB,qBAAU,WACkC,IAApC3C,OAAO4C,QAAQrB,GAAUsB,SACzBN,QAAQC,IAAI,2BAA4BjB,GACxCJ,EAAQ,CAACI,OAGf,CAACA,IA4BC,kBAAC,EAAD,CAAgBlB,WAtC2C,+CCJnE,SAASyC,EAAeC,GACpB,OACIC,KAAKC,MAAMF,GAAe,QAIlC,SAASG,EAAcC,GAKnB,OAJkB,IAAIC,KAAKC,eAAe,QAAS,CAC/CC,KAAM,UACNC,OAAQ,YAEKC,OAAOL,GCkBbM,MA1Bf,SAAeC,GAAQ,IAAD,EACgBpC,mBAAS,GADzB,mBACXqC,EADW,KACAC,EADA,KAmBlB,OAhBAjB,qBAAU,WACN,IAAIkB,EAAQ,KACZ,GAAIH,EAAMI,YAAYC,SAAU,CAC5B,IAAIC,EAAU,IAAIC,KACdC,EAAgBF,EAAQG,UAA2C,IAA9BH,EAAQI,oBACjDR,EAAaM,EAA6C,IAA7BR,EAAMI,YAAYC,UAI/CF,EAAQQ,aAHR,WACIT,GAAa,SAAAU,GAAC,OAAIA,EAAK,SAED,KAE9B,OAAO,WACHC,cAAcV,MAEnB,CAACH,IAGA,uBAAGpD,UAAW,SACT4C,EAAcS,K,gCCUZa,MA1Bf,SAAsBd,GAClB,OACI,yBAAKpD,UAAW,gBACZ,6BACI,kBAAC,EAAD,CAAOwD,YAAaJ,EAAMI,cAC1B,yBAAKxD,UAAW,YACZ,4BAAKoD,EAAMnC,SAASK,MACpB,gCAAM8B,EAAMnC,SAASQ,WAG3B2B,EAAMI,YAAkC,4BAAKhB,EAAeY,EAAMI,YAAYf,cAA1D,sCACtB,kBAAC0B,EAAA,EAAD,CAAYnE,UAAW,iBAAkBoE,aAAW,SAASC,QAASjB,EAAMkB,YACxE,kBAAC,IAAD,CAAYC,SAAS,WAEzB,kBAAC/D,EAAA,EAAD,CACIR,UAAW,wBACXqE,QAASjB,EAAMoB,mBACfjE,QAAQ,WACRG,KAAK,QACLC,MAAM,WALV,Y,MCPG8D,MAXf,SAAiCrB,GAC7B,OACQ,yBAAKpD,UAAW,qBACZ,4BAAKoD,EAAMnC,SAASK,MACpB,4BAAK8B,EAAMnC,SAASQ,SACpB,uBAAGzB,UAAW,eAAgBwC,EAAeY,EAAMI,YAAYf,cAC/D,uBAAGzC,UAAW,uBAAwBoD,EAAMI,YAAYkB,e,MC2CzDC,MAjDf,SAA6BvB,GACzB,IACMwB,EAA6C,KADnC,IAAIjB,MACSG,oBAA2D,IAA3BV,EAAMI,YAAYC,SAEzEoB,EAAuC,IAA5BzB,EAAMI,YAAYqB,QAAkBD,EAC/CE,EAAqC,IAA3B1B,EAAMI,YAAYsB,OAAiBF,EAEnD,OACI,4BACI,4BACI,uCACA,2BAAIhC,EAAciC,KAEtB,4BACI,sCACA,2BAAIjC,EAAckC,KAEtB,4BACI,0CACA,2BAAItC,EAAeY,EAAMI,YAAYuB,aAEzC,4BACI,sCACA,2BAAI3B,EAAMI,YAAYwB,OAAtB,OAEJ,4BACI,yCACA,2BAAIxC,EAAeY,EAAMI,YAAYyB,kBAEzC,4BACI,yCACA,2BAAIzC,EAAeY,EAAMI,YAAY0B,kBAEzC,4BACI,wCACA,2BAAI9B,EAAMI,YAAY2B,SAAtB,SAEJ,4BACI,wCACA,2BAAI/B,EAAMI,YAAY4B,SAAtB,OAEJ,4BACI,0CACA,2BAAIhC,EAAMI,YAAY6B,UAAtB,e,MCnBDC,MAtBf,SAAyBlC,GACrB,OACI,yBAAKpD,UAAW,mBACZ,kBAACQ,EAAA,EAAD,CACIR,UAAW,wBACXqE,QAASjB,EAAMmC,mBACfhF,QAAQ,WACRG,KAAK,QACLC,MAAM,WALV,UAQA,kBAAC,EAAD,CACIM,SAAUmC,EAAMnC,SAChBuC,YAAaJ,EAAMI,cAEvB,kBAAC,EAAD,CACIA,YAAaJ,EAAMI,gB,cCRnC,IAAMgC,EARN,SAAmBC,GACf,IAAIC,EAAS,GAIb,OAHAD,EAAShG,OAAOV,KAAI,SAAC4G,GACjB,OAAOD,EAAOC,EAAQC,QAAQ,KAAM,KAAOH,EAASE,MAEjDD,EAGIG,CAAUC,OACzB7D,QAAQC,IAAIsD,GAkFGO,MAhFf,SAAwB3C,GAAQ,IAAD,EACuBpC,oBAAS,GADhC,mBACpBgF,EADoB,KACDC,EADC,OAEWjF,mBAAS,MAFpB,mBAEpBkF,EAFoB,KAEPC,EAFO,KAI3B,SAASC,IACLH,GAAsBD,GA2D1B,OA7BA3D,qBAAU,WACN,GAAIe,EAAMI,YAAYkB,YAAa,CAC/B,IAAM2B,EAAwBjD,EAAMI,YAAYkB,YAClB,SAA1B2B,GACAF,EAAeX,EAAO,iBAEI,UAA1Ba,GACAF,EAAeX,EAAO,YAEI,WAA1Ba,GACAF,EAAeX,EAAO,mBAEI,iBAA1Ba,GACAF,EAAeX,EAAO,yBAEI,YAA1Ba,GACAF,EAAeX,EAAO,oBAEI,SAA1Ba,GACAF,EAAeX,EAAO,iBAEI,QAA1Ba,GAC6B,SAA1BA,GAC0B,SAA1BA,GACHF,EAAeX,EAAO,mBAG/B,CAACpC,IAGA,kBAAC,IAAD,CAAWkD,YApCf,SAAyBC,GACrB,GAAIA,EACA,OAAOA,EAAOC,WAkCMC,CAAgBrD,EAAMnC,SAAS/B,IAAKwH,MAAOtD,EAAMsD,QACpE,SAAAC,GAAQ,OACL,uCAAK3G,UAAW,iBACX4G,IAAKD,EAASE,UACVF,EAASG,eACTH,EAASI,iBAEd,2BAAOC,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACC,aAAW,EAACC,IAAKlB,IAC3CF,EA/DT,kBAAC,EAAD,CACI/E,SAAUmC,EAAMnC,SAChBuC,YAAaJ,EAAMI,YACnBgB,mBAAoB4B,EACpB9B,WAAYlB,EAAMiE,qBAOtB,kBAAC,EAAD,CACIpG,SAAUmC,EAAMnC,SAChBuC,YAAaJ,EAAMI,YACnB+B,mBAAoBa,S,wBCjC/BkB,aAAaC,aACdD,aAAaC,WAAaC,KAAKC,UAAU,KAG7C,IAAMC,EAAO,mCACPC,EAAgB,CAClBC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GA4HCC,MAzHf,WAA0B,IAAD,EACepH,mBAASwG,KAAKa,MAAMf,aAAaC,aADhD,mBACdA,EADc,KACFe,EADE,OAEiBtH,mBAAS,IAF1B,mBAEduH,EAFc,KAEDC,EAFC,KAafC,EAAkBC,sBAAW,sBAAC,kCAAAtH,EAAA,yDAC5BuH,EAASpB,EAAWxI,KAAI,SAAA4G,GAAO,OAAIA,EAAQzG,MAAI0J,KAAtC,MACTrB,EAAWhF,OAFiB,0CAIFb,MAAM,oDAAD,OAAqDiH,EAArD,+BAAkFjB,EAAlF,aAJH,cAIlB/F,EAJkB,gBAKLA,EAAQC,OALH,UAKlBC,EALkB,OAMxBI,QAAQC,IAAI,8BAA+BL,GAEtCF,EAAQkH,GARW,uBASdhH,EAAKE,QATS,QAWlByB,EAAc3B,EAAKiH,KAAK/J,KAAI,SAAA4G,GAC9B,MAAQ,CACJlD,YAAakD,EAAQoD,KAAKC,KAC1BvF,SAAUkC,EAAQ3D,IAAIyB,SACtBiB,YAAaiB,EAAQsD,QAAQ,GAAGF,KAChClE,QAASc,EAAQ3D,IAAI6C,QACrBC,OAAQa,EAAQ3D,IAAI8C,OACpBC,UAAWY,EAAQoD,KAAKG,WACxBlE,OAAQW,EAAQX,OAAOmE,IACvBlE,eAAgBU,EAAQoD,KAAKK,SAC7BlE,eAAgBS,EAAQoD,KAAKM,SAC7BlE,SAAUQ,EAAQoD,KAAK5D,SACvBC,SAAUO,EAAQoD,KAAK3D,SACvBC,UAAWM,EAAQ2D,KAAKC,UAGhCtH,QAAQC,IAAI,yCAA0CsB,GACtDgF,EAAehF,GA5BS,kDA8BxBvB,QAAQC,IAAR,MACAC,IAAMC,MAAN,KAAmBuF,GA/BK,0DAkCjC,CAACJ,IAsCJ,OApCAlF,qBAAU,WACNoG,MACD,CAACA,IAEJpG,qBAAU,WACNiF,aAAaC,WAAaC,KAAKC,UAAUF,MAgCzC,oCACI,kBAAC,EAAD,CAAyB1G,QAnFjC,SAAiBgB,GACbI,QAAQC,IAAI,qCAAsCL,GAC9C0F,EAAWiC,MAAK,SAAA7D,GAAO,OAAIA,EAAQzG,KAAO2C,EAAK,GAAG3C,MAClDiD,IAAMC,MAAM,qBAAsBuF,GAElCW,GAAc,SAAAQ,GAAI,4BAAQA,GAAR,CAAcjH,EAAK,SA8EMf,OAAQ4G,EAAS3G,cAAe4G,IAC3E,kBAAC,IAAD,CAAiB8B,UAxBzB,SAAmBC,GAAS,IACjBC,EAAoCD,EAApCC,YAAaC,EAAuBF,EAAvBE,OAAQtD,EAAeoD,EAAfpD,YAE5B,GAAKqD,IAKDA,EAAYE,cAAgBD,EAAOC,aACnCF,EAAYjD,QAAUkD,EAAOlD,OAFjC,CAOA,IAAMoD,EAAQ,YAAOvC,GACfwC,EAAcD,EAASE,QAAO,SAAC1K,GAAD,OAAOA,EAAEJ,MAAQoH,KACrDwD,EAASG,OAAOL,EAAOlD,MAAO,GAC9BoD,EAASG,OAAT,MAAAH,EAAQ,CAAQH,EAAYjD,MAAO,GAA3B,mBAAiCqD,KACzCzB,EAAcwB,MAON,kBAAC,IAAD,CAAWD,YAAa,eACnB,SAAAlD,GAAQ,OACL,uCACI3G,UAAW,iBACP2G,EAASuD,eAFjB,CAGItD,IAAKD,EAASE,WAEd,kBAACsD,EAAA,EAAD,KACK5C,EAAWxI,KAAI,SAAC4G,EAASe,GAAV,OACZ,kBAAC0D,EAAA,EAAD,CACIC,IAAK9C,EAAWb,GAAOxH,GACvBoL,QAAS,IACTC,WAAW,0BAEX,kBAAC,EAAD,CACI7D,MAAOA,EACPzF,SAAUsG,EAAWb,GACrBlD,YAAa+E,EAAY7B,KAAU,EACnCW,mBAAoB,SAAClG,GAAD,OAlD5D,SAA4BqJ,EAAG9D,GAE3B,IAAI+D,EAAO,YAAOlD,GAClBkD,EAAQR,OAAOvD,EAAO,GACtB4B,EAAcmC,GA8CqDC,CAAmBvJ,EAAOuF,UAIpEC,EAASgE,oBCvH3BC,G,6KATP,OACI,yBAAK5K,UAAU,OACX,sDACA,kBAAC,EAAD,W,GALE6K,cCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BhK,QAAQC,IACN,iHAKEoJ,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB1J,QAAQC,IAAI,sCAGRoJ,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAhK,GACLH,QAAQG,MAAM,4CAA6CA,M,MCxFjEiK,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAgBvM,UAAW,iBAE7BwM,SAASC,eAAe,SDSnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,eAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtC5J,MAAM2J,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLnK,QAAQC,IACN,oEAvFAsL,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCzJ,QAAQC,IACN,iHAMJkJ,EAAgBC,EAAOC,OC/B/BE,K","file":"static/js/main.48b5ff46.chunk.js","sourcesContent":["var map = {\n\t\"./Clouds-day.mp4\": 80,\n\t\"./Drizzle-day.mp4\": 81,\n\t\"./Fog-day.mp4\": 82,\n\t\"./Rain-day-add.mp4\": 83,\n\t\"./Rain-day.mp4\": 84,\n\t\"./Snowfall.mp4\": 85,\n\t\"./Sun.mp4\": 86,\n\t\"./Thunderstorm-day.mp4\": 87\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 79;","module.exports = __webpack_public_path__ + \"static/media/Clouds-day.cc38b2a2.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle-day.6f2e858e.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Fog-day.62f5a769.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Rain-day-add.2488d149.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Rain-day.de58e629.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Snowfall.bf29e321.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Sun.ae0becdc.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm-day.b0b97a7c.mp4\";","import React from \"react\";\nimport './FormCitySearch.css';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction FormCitySearch({handleForm}) {\n    return (\n        <form className={\"search-form\"} onSubmit={handleForm}>\n            <div>\n                <TextField\n                className={\"data-input\"}\n                required type={\"text\"}\n                name={\"city\"}\n                id=\"outlined-basic\"\n                label=\"City...\"\n                variant=\"outlined\"\n                 />\n                <TextField\n                    className={\"data-input\"}\n                    type={\"text\"} name={\"country\"}\n                    id=\"outlined-basic\"\n                    label=\"Country code...\"\n                    variant=\"outlined\"\n                />\n            </div>\n            <Button\n                className={\"data-submit\"}\n                type={onsubmit}\n                variant=\"outlined\"\n                size=\"medium\"\n                color=\"primary\"\n            >\n                Get Weather\n            </Button>\n        </form>\n    )\n}\n\nexport default FormCitySearch;","import React, {useEffect, useState} from \"react\";\nimport {toast} from \"react-toastify\";\nimport FormCitySearch from \"./FormCitySearch/FormCitySearch\";\n\nfunction FormCitySearchContainer({addCity, apiKey, toastSettings}) {\n    const[cityData, setCityData] = useState( {});\n    // const[weatherData, setWeatherData]= useState({});\n\n    useEffect(() => {\n        if (Object.entries(cityData).length !== 0) {\n            console.log('FormCitySearch API data:', cityData);\n            addCity([cityData]); //props return to WeatherGlobal\n        }\n        // eslint-disable-next-line\n    },[cityData]);\n\n    async function getCityByName(event) {\n        event.preventDefault();\n        try {\n            const city = event.target.city.value;\n            const country = event.target.country.value;\n            event.target.city.value = ``;\n            event.target.country.value = ``;\n            const get_api = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country ? country : ''}&appid=${apiKey}&units=metric`);\n            const data = await get_api.json();\n            //from API- we get data for 1 city by name (and country code, but it not 'required')\n            if (data.cod >= 400 && data.cod <= 499) {\n                throw data.message;\n            }\n            setCityData({\n                id: data.id,\n                city: data.name,\n                country: data.sys.country\n            });\n\n        } catch (error) {\n            console.log(error);\n            toast.error(error, toastSettings)\n        }\n    }\n\n    return (\n        <FormCitySearch handleForm={getCityByName}/>\n    )\n}\n\nexport default FormCitySearchContainer","function degreePrettier(temperature) {\n    return (\n        Math.round(temperature) + '\\u00B0C'\n    )\n}\n\nfunction timeFormatter(time) {\n    const formatter = new Intl.DateTimeFormat(\"ru-RU\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n    });\n    return formatter.format(time);\n}\n\nexport {degreePrettier, timeFormatter};","import React, {useState, useEffect} from \"react\";\nimport {timeFormatter} from \"../../../../../utils/utils\";\n\nfunction Clock(props) {\n    const [localTime, setLocalTime] = useState(0);\n\n    useEffect(() => {\n        let timer = null;\n        if (props.weatherData.timezone) {\n            let newDate = new Date();\n            let utc_timestamp = newDate.getTime() + (newDate.getTimezoneOffset() * 60000);\n            setLocalTime(utc_timestamp + props.weatherData.timezone * 1000);\n            function tick() {\n                setLocalTime(t => t += 1000)\n            }\n            timer = setInterval(tick, 1000)\n        }\n        return () => { //ComponentWillUnmount\n            clearInterval(timer)\n        }\n    }, [props]);\n\n    return (\n        <p className={'Clock'}>\n            {timeFormatter(localTime)}\n        </p>\n    )\n}\n\nexport default Clock","import React from \"react\";\nimport Clock from \"./Clock/Clock\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport \"./WeatherShort.css\"\nimport Button from \"@material-ui/core/Button\";\nimport {degreePrettier} from \"../../../../utils/utils\";\n\nfunction WeatherShort(props) {\n    return (\n        <div className={'WeatherShort'}>\n            <div>\n                <Clock weatherData={props.weatherData}/>\n                <div className={'location'}>\n                    <h2>{props.cityData.city}</h2>\n                    <p>, {props.cityData.country}</p>\n                </div>\n            </div>\n            {!props.weatherData ? <h3>t&deg;C</h3>  : <h3>{degreePrettier(props.weatherData.temperature)}</h3>  }\n            <IconButton className={'weather-remove'} aria-label=\"delete\" onClick={props.removeCity}>\n                <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n            <Button\n                className={'weather-expand-minify'}\n                onClick={props.clickHandlerExpand}\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"primary\">\n                expand\n            </Button>\n        </div>\n    )\n}\n\nexport default WeatherShort","import React from \"react\";\nimport './WeatherDetailedLocation.css'\nimport {degreePrettier} from \"../../../../../utils/utils\";\n\nfunction WeatherDetailedLocation(props) {\n    return (\n            <div className={'location-detailed'}>\n                <h2>{props.cityData.city}</h2>\n                <h3>{props.cityData.country}</h3>\n                <p className={'temperature'}>{degreePrettier(props.weatherData.temperature)}</p>\n                <p className={'weather-description'}>{props.weatherData.description}</p>\n            </div>\n    )\n}\n\nexport default WeatherDetailedLocation","import React from \"react\";\nimport {degreePrettier,timeFormatter} from \"../../../../../utils/utils\";\nimport './WeatherDetailedData.css'\n\nfunction WeatherDetailedData(props) {\n    const newDate = new Date();\n    const toLocalTime = (newDate.getTimezoneOffset() * 60000) + (props.weatherData.timezone*1000);\n\n    const sunrise = (props.weatherData.sunrise * 1000) + toLocalTime;\n    const sunset = (props.weatherData.sunset * 1000) + toLocalTime;\n\n    return (\n        <ul>\n            <li>\n                <h4>Sunrise</h4>\n                <p>{timeFormatter(sunrise)}</p>\n            </li>\n            <li>\n                <h4>Sunset</h4>\n                <p>{timeFormatter(sunset)}</p>\n            </li>\n            <li>\n                <h4>Feels like</h4>\n                <p>{degreePrettier(props.weatherData.feelsLike)}</p>\n            </li>\n            <li>\n                <h4>Clouds</h4>\n                <p>{props.weatherData.clouds} %</p>\n            </li>\n            <li>\n                <h4>Temp. min</h4>\n                <p>{degreePrettier(props.weatherData.temperatureMin)}</p>\n            </li>\n            <li>\n                <h4>Temp. max</h4>\n                <p>{degreePrettier(props.weatherData.temperatureMax)}</p>\n            </li>\n            <li>\n                <h4>Pressure</h4>\n                <p>{props.weatherData.pressure} hPa</p>\n            </li>\n            <li>\n                <h4>Humidity</h4>\n                <p>{props.weatherData.humidity} %</p>\n            </li>\n            <li>\n                <h4>Wind speed</h4>\n                <p>{props.weatherData.windSpeed} mtr/sec</p>\n            </li>\n        </ul>\n    )\n}\n\nexport default WeatherDetailedData","import React from \"react\";\nimport WeatherDetailedLocation from \"./WeatherDetailedLocation/WeatherDetailedLocation\";\nimport WeatherDetailedData from \"./WeatherDetailedData/WeatherDetailedData\";\nimport './WeatherDetailed.css'\nimport Button from \"@material-ui/core/Button\";\n\nfunction WeatherDetailed(props) {\n    return (\n        <div className={'WeatherDetailed'}>\n            <Button\n                className={'weather-expand-minify'}\n                onClick={props.clickHandlerMinify}\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"primary\">\n                minify\n            </Button>\n            <WeatherDetailedLocation\n                cityData={props.cityData}\n                weatherData={props.weatherData}\n            />\n            <WeatherDetailedData\n                weatherData={props.weatherData}\n            />\n        </div>\n    )\n}\n\nexport default WeatherDetailed","import React, {useEffect, useState} from \"react\";\nimport WeatherShort from \"./WeatherShort/WeatherShort\";\nimport WeatherDetailed from \"./WeatherDetailed/WeatherDetailed\";\nimport {Draggable} from \"react-beautiful-dnd\";\nimport './WeatherWrapper.css';\n\nfunction importAll(_require) {\n    let videos = {};\n    _require.keys().map((element) => {\n        return(videos[element.replace('./', '')] = _require(element))\n    });\n    return videos;\n}\n\nconst VIDEOS = importAll(require.context('./videos', false, /\\.mp4/));\nconsole.log(VIDEOS)\n\nfunction WeatherWrapper(props) {\n    const [toggleWeatherFlag, setToggleWeatherFlag] = useState(true);\n    const [videoSource, setVideoSource] = useState(null);\n\n    function toggleWeatherToShow() {\n        setToggleWeatherFlag(!toggleWeatherFlag);\n    }\n\n    function createWeatherShort() {\n        return(\n            <WeatherShort\n                cityData={props.cityData}\n                weatherData={props.weatherData}\n                clickHandlerExpand={toggleWeatherToShow}\n                removeCity={props.clickHandlerRemove}\n            />\n        )\n    }\n\n    function createWeatherDetailed() {\n        return (\n            <WeatherDetailed\n                cityData={props.cityData}\n                weatherData={props.weatherData}\n                clickHandlerMinify={toggleWeatherToShow}\n            />\n        )\n    }\n\n    function convertToString(_props) {\n        if (_props) {\n            return _props.toString()\n        }\n    }\n\n    useEffect(() => {\n        if (props.weatherData.description) {\n            const weatherDescriptionAPI = props.weatherData.description;\n            if (weatherDescriptionAPI === 'Rain') {\n                setVideoSource(VIDEOS['Rain-day.mp4']);\n            }\n            if (weatherDescriptionAPI === 'Clear') {\n                setVideoSource(VIDEOS['Sun.mp4']);\n            }\n            if (weatherDescriptionAPI === 'Clouds') {\n                setVideoSource(VIDEOS['Clouds-day.mp4']);\n            }\n            if (weatherDescriptionAPI === 'Thunderstorm') {\n                setVideoSource(VIDEOS['Thunderstorm-day.mp4']);\n            }\n            if (weatherDescriptionAPI === 'Drizzle') {\n                setVideoSource(VIDEOS['Drizzle-day.mp4']);\n            }\n            if (weatherDescriptionAPI === 'Snow') {\n                setVideoSource(VIDEOS['Snowfall.mp4']);\n            }\n            if (weatherDescriptionAPI === 'Fog'\n                || weatherDescriptionAPI === 'Haze'\n                || weatherDescriptionAPI === 'Mist') {\n                setVideoSource(VIDEOS['Fog-day.mp4']);\n            }\n        }\n    }, [props]);\n\n    return (\n        <Draggable draggableId={convertToString(props.cityData.id)} index={props.index}>\n            {provided =>\n                <div className={'WeatherWrapper'}\n                     ref={provided.innerRef}\n                     {...provided.draggableProps}\n                     {...provided.dragHandleProps}\n                >\n                    <video autoPlay loop muted playsInline src={videoSource}></video>\n                    {toggleWeatherFlag ? createWeatherShort() : createWeatherDetailed()}\n                </div>\n            }\n        </Draggable>\n    )\n}\n\nexport default WeatherWrapper\n\n","import React, {useState, useCallback, useEffect} from \"react\";\nimport FormCitySearchContainer from \"./FormCitySearchContainer/FormCitySearchContainer\"\nimport WeatherWrapper from \"./WeatherWrapper/WeatherWrapper\";\nimport {toast} from \"react-toastify\";\nimport {DragDropContext, Droppable} from \"react-beautiful-dnd\";\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport './WeatherGlobal.css'\n\nif (!localStorage.citiesList) {\n    localStorage.citiesList = JSON.stringify([])\n}\n\nconst API_KEY = `30c1cbeda422363611d8892955df2a7a`;\nconst ToastSettings = {\n    position: \"bottom-center\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n};\n\nfunction WeatherGlobal() {\n    const [citiesList, setCitiesList] = useState(JSON.parse(localStorage.citiesList));\n    const [weatherList, setWeatherList] = useState([]);\n\n    function addCity(data) {\n        console.log('WeatherGlobal func addCity(props):', data);\n        if (citiesList.find(element => element.id === data[0].id)) {\n            toast.error('city already exist', ToastSettings)\n        } else {\n            setCitiesList(list => [...list, data[0]]);\n        }\n    }\n\n    const getWeatherByIDs = useCallback(async () => {\n        let idList = citiesList.map(element => element.id).join(`,`);\n        if (citiesList.length) {\n            try {\n                const get_api = await fetch(`https://api.openweathermap.org/data/2.5/group?id=${idList}&units=metric&appid=${API_KEY}&lang=ru`);\n                const data = await get_api.json();\n                console.log('WeatherGlobal fetch result:', data);\n                //from API- we get data for multiple cities by city ID\n                if (!get_api.ok) {\n                    throw data.message;\n                }\n                const weatherData = data.list.map(element => {\n                    return ({\n                        temperature: element.main.temp,\n                        timezone: element.sys.timezone,\n                        description: element.weather[0].main,\n                        sunrise: element.sys.sunrise,\n                        sunset: element.sys.sunset,\n                        feelsLike: element.main.feels_like,\n                        clouds: element.clouds.all,\n                        temperatureMin: element.main.temp_min,\n                        temperatureMax: element.main.temp_max,\n                        pressure: element.main.pressure,\n                        humidity: element.main.humidity,\n                        windSpeed: element.wind.speed,\n                    })\n                });\n                console.log('WeatherGlobal prepared data form fetch', weatherData);\n                setWeatherList(weatherData)\n            } catch (error) {\n                console.log(error);\n                toast.error(error, ToastSettings)\n            }\n        }\n    }, [citiesList]);\n\n    useEffect(() => {\n        getWeatherByIDs();\n    }, [getWeatherByIDs]);\n\n    useEffect(() => {\n        localStorage.citiesList = JSON.stringify(citiesList);\n    });\n\n    function weatherShortRemove(_, index) {\n        // event.stopPropagation();\n        let newList = [...citiesList];\n        newList.splice(index, 1);\n        setCitiesList(newList);\n    }\n\n    function onDragEnd(result) {\n        const {destination, source, draggableId} = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const newOrder = [...citiesList];\n        const draggedItem = newOrder.filter((e) => e.id === +draggableId);\n        newOrder.splice(source.index, 1);\n        newOrder.splice(destination.index, 0, ...draggedItem);\n        setCitiesList(newOrder);\n    }\n\n    return (\n        <>\n            <FormCitySearchContainer addCity={addCity} apiKey={API_KEY} toastSettings={ToastSettings}/>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId={'main-order'}>\n                    {provided => (\n                        <div\n                            className={'WeatherGlobal'}\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                        >\n                            <TransitionGroup>\n                                {citiesList.map((element, index) =>\n                                    <CSSTransition\n                                        key={citiesList[index].id}\n                                        timeout={500}\n                                        classNames=\"transition-item-global\"\n                                    >\n                                        <WeatherWrapper\n                                            index={index}\n                                            cityData={citiesList[index]}\n                                            weatherData={weatherList[index] || false}\n                                            clickHandlerRemove={(event) => weatherShortRemove(event, index)}\n                                        />\n                                    </CSSTransition>)\n                                }\n                                {provided.placeholder}\n                            </TransitionGroup>\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </>\n    )\n}\n\nexport default WeatherGlobal;","import React, { Component } from \"react\";\nimport WeatherGlobal from \"./components/WeatherGlobal/WeatherGlobal\";\nimport \"./App.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Hello, I'm weather app</h1>\n                <WeatherGlobal/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to !!!!(firebase)\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n    <ToastContainer className={\"toast-error\"} />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}